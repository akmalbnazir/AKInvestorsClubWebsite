generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  role         String         @default("MEMBER")
  approved     Boolean        @default(false)
  passwordHash String
  createdAt    DateTime       @default(now())

  // existing relations
  awards       Award[]
  bulletins    Bulletin[]
  comments     Comment[]
  Post         Post[]
  sessions     Session[]
  progresses   UserProgress[]

  // new relations
  account      Account?
  holdings     Holding[]
  trades       Trade[]
  progresses2  Progress[]
  toolRuns     ToolRun[]
}

model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  level     String   @default("BEGINNER")
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id])
}

model Award {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime  @default(now())

  comments  Comment[]
  User      User      @relation(fields: [authorId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model JoinRequest {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  grade     String?
  interest  String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Bulletin {
  id        String   @id @default(cuid())
  message   String
  authorId  String?
  createdAt DateTime @default(now())

  author    User?    @relation(fields: [authorId], references: [id])
}

model Event {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  location  String
  details   String
  createdAt DateTime @default(now())
}

//// ---------- NEW MODELS ----------

model Account {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  cash      Float    @default(100000) // starting balance
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Holding {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  symbol    String
  quantity  Float
  avgPrice  Float
  createdAt DateTime @default(now())

  @@unique([userId, symbol])
}

model Trade {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  symbol    String
  quantity  Float
  price     Float
  side      String   // "BUY" | "SELL"
  createdAt DateTime @default(now())
}

model Progress {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  key       String   // e.g., "course:1:3"
  status    String   // "viewed" | "completed"
  score     Int?
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, key])
}

model ToolRun {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  kind      String   // "correlation" | "montecarlo" | ...
  inputJson String
  outputJson String
  createdAt DateTime @default(now())
}
